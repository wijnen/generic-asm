Plans:

- allow setting a region for placement of a block of code
- implement all directives




For object files, a file format is needed.  Here it is:

- 4B Magic: "#\xfeof"
- 4B file format version: "\0\0\0\0".
- script data string.
- '\0'.
- rest of the file: Code.

Block types:
0 = absolute code.  extra data is start address.
1 = relative code.  must be placed by linker.  extra data is ignored.

linker script commands (all end with newline, '\x0a'):
?expression		if expression is non-zero
	commands	do commands
	:		else	(may be omitted)
	commands	do commands
	;		end if

name=expression		Define a symbol.  name must not start with '.' or '@'.
+expression		Add a byte to the file.  expression must be between -0x80 and +0xff.
<expression		Set new origin for positioned block.  In case of overlapping absolute blocks in a hex file, the last block's values are written.  If expression is empty, let linker determine position.  For binary output, all blocks are output sequencially.  The origin is only important for determining labels.
>expression		Add expression bytes from Code to the file.  If used inside an if statement, the bytes are skipped if this command is skipped.
#comment		Ignored.

special symbol:
$	start of current block.  This is not to be confused with the expression
	"$", which is the current address.  For non-absolute blocks, this
	expression is converted into the linker expression "addr+$" (where addr
	is the address within the current block)

The linker positions blocks after reading all input.  It places each absolute
block at the given address, without checking for overlap.  Relative blocks are
placed in the first valid position where it doesn't overlap with a previous
relative or absolute block.  If relative blocks should not overlap with
absolute blocks at all, the absolute blocks must be passed to the linker first.

The code after the script string should be exactly the size needed by the
script.  If there is data left after the script is finished, the results are
undefined.
